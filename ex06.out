============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 6409 was started by qwang on grid01,
Wed Jun 26 22:33:07 2019
The command was "prover9 -f ex06.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ex06.in


formulas(sos).
(all x (coyote(x) -> (exists y (runner(y) & chase(x,y))))).
(all x (runner(x) & beep(x) -> smart(x))).
-(exists x (coyote(x) & (exists y (runner(y) & smart(y) & catch(x,y))))).
(all x (coyote(x) & (exists y (runner(y) & chase(x,y) & -catch(x,y))) -> frustrated(x))).
end_of_list.

formulas(goals).
(all x (runner(x) -> beep(x))) -> (all y (coyote(y) -> frustrated(y))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (coyote(x) -> (exists y (runner(y) & chase(x,y))))) # label(non_clause).  [assumption].
2 (all x (runner(x) & beep(x) -> smart(x))) # label(non_clause).  [assumption].
3 -(exists x (coyote(x) & (exists y (runner(y) & smart(y) & catch(x,y))))) # label(non_clause).  [assumption].
4 (all x (coyote(x) & (exists y (runner(y) & chase(x,y) & -catch(x,y))) -> frustrated(x))) # label(non_clause).  [assumption].
5 (all x (runner(x) -> beep(x))) -> (all y (coyote(y) -> frustrated(y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-coyote(x) | runner(f1(x)).  [clausify(1)].
-coyote(x) | chase(x,f1(x)).  [clausify(1)].
-runner(x) | -beep(x) | smart(x).  [clausify(2)].
-coyote(x) | -runner(y) | -smart(y) | -catch(x,y).  [clausify(3)].
-coyote(x) | -runner(y) | -chase(x,y) | catch(x,y) | frustrated(x).  [clausify(4)].
-runner(x) | beep(x).  [deny(5)].
coyote(c1).  [deny(5)].
-frustrated(c1).  [deny(5)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating coyote/1
6 coyote(c1).  [deny(5)].
7 -coyote(x) | runner(f1(x)).  [clausify(1)].
8 -coyote(x) | chase(x,f1(x)).  [clausify(1)].
9 -coyote(x) | -runner(y) | -smart(y) | -catch(x,y).  [clausify(3)].
10 -coyote(x) | -runner(y) | -chase(x,y) | catch(x,y) | frustrated(x).  [clausify(4)].
Derived: runner(f1(c1)).  [resolve(6,a,7,a)].
Derived: chase(c1,f1(c1)).  [resolve(6,a,8,a)].
Derived: -runner(x) | -smart(x) | -catch(c1,x).  [resolve(6,a,9,a)].
Derived: -runner(x) | -chase(c1,x) | catch(c1,x) | frustrated(c1).  [resolve(6,a,10,a)].

Eliminating runner/1
11 runner(f1(c1)).  [resolve(6,a,7,a)].
12 -runner(x) | -beep(x) | smart(x).  [clausify(2)].
13 -runner(x) | beep(x).  [deny(5)].
Derived: -beep(f1(c1)) | smart(f1(c1)).  [resolve(11,a,12,a)].
Derived: beep(f1(c1)).  [resolve(11,a,13,a)].
14 -runner(x) | -smart(x) | -catch(c1,x).  [resolve(6,a,9,a)].
Derived: -smart(f1(c1)) | -catch(c1,f1(c1)).  [resolve(14,a,11,a)].
15 -runner(x) | -chase(c1,x) | catch(c1,x) | frustrated(c1).  [resolve(6,a,10,a)].
Derived: -chase(c1,f1(c1)) | catch(c1,f1(c1)) | frustrated(c1).  [resolve(15,a,11,a)].

Eliminating frustrated/1
16 -chase(c1,f1(c1)) | catch(c1,f1(c1)) | frustrated(c1).  [resolve(15,a,11,a)].
17 -frustrated(c1).  [deny(5)].
Derived: -chase(c1,f1(c1)) | catch(c1,f1(c1)).  [resolve(16,c,17,a)].

Eliminating chase/2
18 -chase(c1,f1(c1)) | catch(c1,f1(c1)).  [resolve(16,c,17,a)].
19 chase(c1,f1(c1)).  [resolve(6,a,8,a)].
Derived: catch(c1,f1(c1)).  [resolve(18,a,19,a)].

Eliminating beep/1
20 beep(f1(c1)).  [resolve(11,a,13,a)].
21 -beep(f1(c1)) | smart(f1(c1)).  [resolve(11,a,12,a)].
Derived: smart(f1(c1)).  [resolve(20,a,21,a)].

Eliminating smart/1
22 smart(f1(c1)).  [resolve(20,a,21,a)].
23 -smart(f1(c1)) | -catch(c1,f1(c1)).  [resolve(14,a,11,a)].
Derived: -catch(c1,f1(c1)).  [resolve(22,a,23,a)].

Eliminating catch/2
24 -catch(c1,f1(c1)).  [resolve(22,a,23,a)].
25 catch(c1,f1(c1)).  [resolve(18,a,19,a)].
Derived: $F.  [resolve(24,a,25,a)].

============================== end predicate elimination =============

Auto_denials:  (no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ ]).
Function symbol precedence:  function_order([ ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(neg_binary_resolution).  % (HNE depth_diff=0)
  % clear(ordered_res).  % (HNE depth_diff=0)
  % set(ur_resolution).  % (HNE depth_diff=0)
    % set(ur_resolution) -> set(pos_ur_resolution).
    % set(ur_resolution) -> set(neg_ur_resolution).

Auto_process settings:  (no changes).


============================== PROOF =================================

% Proof 1 at 0.00 (+ 0.00) seconds.
% Length of proof is 26.
% Level of proof is 6.
% Maximum clause weight is 0.000.
% Given clauses 0.

1 (all x (coyote(x) -> (exists y (runner(y) & chase(x,y))))) # label(non_clause).  [assumption].
2 (all x (runner(x) & beep(x) -> smart(x))) # label(non_clause).  [assumption].
3 -(exists x (coyote(x) & (exists y (runner(y) & smart(y) & catch(x,y))))) # label(non_clause).  [assumption].
4 (all x (coyote(x) & (exists y (runner(y) & chase(x,y) & -catch(x,y))) -> frustrated(x))) # label(non_clause).  [assumption].
5 (all x (runner(x) -> beep(x))) -> (all y (coyote(y) -> frustrated(y))) # label(non_clause) # label(goal).  [goal].
6 coyote(c1).  [deny(5)].
7 -coyote(x) | runner(f1(x)).  [clausify(1)].
8 -coyote(x) | chase(x,f1(x)).  [clausify(1)].
9 -coyote(x) | -runner(y) | -smart(y) | -catch(x,y).  [clausify(3)].
10 -coyote(x) | -runner(y) | -chase(x,y) | catch(x,y) | frustrated(x).  [clausify(4)].
11 runner(f1(c1)).  [resolve(6,a,7,a)].
12 -runner(x) | -beep(x) | smart(x).  [clausify(2)].
13 -runner(x) | beep(x).  [deny(5)].
14 -runner(x) | -smart(x) | -catch(c1,x).  [resolve(6,a,9,a)].
15 -runner(x) | -chase(c1,x) | catch(c1,x) | frustrated(c1).  [resolve(6,a,10,a)].
16 -chase(c1,f1(c1)) | catch(c1,f1(c1)) | frustrated(c1).  [resolve(15,a,11,a)].
17 -frustrated(c1).  [deny(5)].
18 -chase(c1,f1(c1)) | catch(c1,f1(c1)).  [resolve(16,c,17,a)].
19 chase(c1,f1(c1)).  [resolve(6,a,8,a)].
20 beep(f1(c1)).  [resolve(11,a,13,a)].
21 -beep(f1(c1)) | smart(f1(c1)).  [resolve(11,a,12,a)].
22 smart(f1(c1)).  [resolve(20,a,21,a)].
23 -smart(f1(c1)) | -catch(c1,f1(c1)).  [resolve(14,a,11,a)].
24 -catch(c1,f1(c1)).  [resolve(22,a,23,a)].
25 catch(c1,f1(c1)).  [resolve(18,a,19,a)].
26 $F.  [resolve(24,a,25,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=1. Kept=0. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=0, Disabled=21. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.04.
User_CPU=0.00, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 6409 exit (max_proofs) Wed Jun 26 22:33:07 2019
